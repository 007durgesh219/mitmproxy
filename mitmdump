#!/usr/bin/env python

# Copyright (C) 2010  Aldo Cortesi
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os.path
from libmproxy import proxy, dump, utils
from libmproxy import VERSION
from optparse import OptionParser, OptionGroup


if __name__ == '__main__':
    parser = OptionParser(
                usage = "%prog [options] [filter]",
                version="%%prog %s"%VERSION,
            )
    proxy.certificate_option_group(parser)
    parser.add_option(
        "-p", "--port", action="store",
        type = "int", dest="port", default=8080,
        help = "Port."
    )
    parser.add_option("-q", "--quiet",
                      action="store_true", dest="quiet",
                      help="Quiet.")
    parser.add_option("-v", "--verbose",
                      action="count", dest="verbose", default=1,
                      help="Increase verbosity. Can be passed multiple times.")
    parser.add_option("-w", "--writefile",
                      action="store", dest="wfile", default=None,
                      help="Write flows to file.")
    parser.add_option("", "--reqscript",
                      action="store", dest="request_script", default=None,
                      help="Script to run when a request is recieved.")
    parser.add_option("", "--respscript",
                      action="store", dest="response_script", default=None,
                      help="Script to run when a response is recieved.")

    options, args = parser.parse_args()


    if options.quiet:
        options.verbose = 0

    proxy.process_certificate_option_group(parser, options)

    config = proxy.Config(
        certfile = options.cert,
        certpath = options.certpath,
        cacert   = options.cacert,
        ciphers = options.ciphers
    )
    server = proxy.ProxyServer(config, options.port)

    dumpopts = dump.Options(
        verbosity = options.verbose,
        wfile = options.wfile,
        request_script = options.request_script,
        response_script = options.response_script,
    )
    if args:
        filt = " ".join(args)
    else:
        filt = None

    if options.verbose > 0:
        print >> sys.stderr, "Running on port %s"%options.port

    try:
        m = dump.DumpMaster(server, dumpopts, filt)
        m.run()
    except dump.DumpError, e:
        print >> sys.stderr, "mitmdump:", e
        sys.exit(1)
    except KeyboardInterrupt:
        pass
