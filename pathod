#!/usr/bin/env python
import argparse, sys, logging
from libpathod import pathod, utils, version

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='A pathological HTTP/S daemon.')
    parser.add_argument("-p", dest='port', default=9999, type=int, help='Port. Specify 0 to pick an arbitrary empty port.')
    parser.add_argument("-l", dest='address', default="0.0.0.0", type=str, help='Listening address.')
    parser.add_argument(
        "-a", dest='anchors', default=[], type=str, action="append", metavar="ANCHOR",
        help='Add an anchor. Specified as a string with the form pattern=pagespec'
    )
    parser.add_argument(
        "-c", dest='craftanchor', default="/p/", type=str,
        help='Anchorpoint for URL crafting commands.'
    )
    parser.add_argument(
        "-d", dest='staticdir', default=None, type=str,
        help='Directory for static files.'
    )
    parser.add_argument(
        "--debug", dest='debug', default=False, action="store_true",
        help='Enable debug output.'
    )
    parser.add_argument(
        "-s", dest='ssl', default=False, action="store_true",
        help='Serve with SSL.'
    )
    parser.add_argument(
        "--limit-size", dest='sizelimit', default=None, type=str,
        help='Size limit of served responses. Understands size suffixes, i.e. 100k.'
    )
    parser.add_argument(
        "--noapi", dest='noapi', default=False, action="store_true",
        help='Disable API.'
    )
    parser.add_argument(
        "--noweb", dest='noweb', default=False, action="store_true",
        help='Disable both web interface and API.'
    )
    parser.add_argument(
        "--nocraft", dest='nocraft', default=False, action="store_true",
        help='Disable response crafting. If anchors are specified, they still work.'
    )
    parser.add_argument(
        "--keyfile", dest='ssl_keyfile', default=None, type=str,
        help='SSL key file. If not specified, a default key is used.'
    )
    parser.add_argument(
        "--certfile", dest='ssl_certfile', default=None, type=str,
        help='SSL cert file. If not specified, a default cert is used.'
    )
    args = parser.parse_args()

    sl = [args.ssl_keyfile, args.ssl_certfile]
    if any(sl) and not all(sl):
        parser.error("Both --certfile and --keyfile must be specified.")

    if args.ssl:
        ssl = dict(
             keyfile = args.ssl_keyfile or utils.data.path("resources/server.key"),
             certfile = args.ssl_certfile or utils.data.path("resources/server.crt"),
        )
    else:
        ssl = None

    alst = []
    for i in args.anchors:
        parts = utils.parse_anchor_spec(i)
        if not parts:
            parser.error("Invalid anchor specification: %s"%i)
        alst.append(parts)

    root = logging.getLogger()
    if root.handlers:
        for handler in root.handlers:
            root.removeHandler(handler)
    logging.basicConfig(
        format='%(asctime)s: %(message)s',
        datefmt='%d-%m-%y %I:%M:%S',
        level=logging.DEBUG
    )
    if not args.debug:
        logging.disable(logging.DEBUG)

    sizelimit = None
    if args.sizelimit:
        try:
            sizelimit = utils.parse_size(args.sizelimit)
        except ValueError, v:
            parser.error(v)

    try:
        pd = pathod.Pathod(
            (args.address, args.port),
            craftanchor = args.craftanchor,
            ssloptions = ssl,
            staticdir = args.staticdir,
            anchors = alst,
            sizelimit = sizelimit,
            noweb = args.noweb,
            nocraft = args.nocraft,
            noapi = args.noapi
        )
    except pathod.PathodError, v:
        parser.error(str(v))
    try:
        print "%s listening on port %s"%(version.NAMEVERSION, pd.port)
        pd.serve_forever()
    except KeyboardInterrupt:
        pass
